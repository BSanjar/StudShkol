// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0");

            modelBuilder.Entity("Domain.Admin", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("login")
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Domain.Answer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("answer")
                        .HasColumnType("INTEGER");

                    b.Property<int>("score")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("testsid")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("testsid");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("Domain.GroupTest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeToTest")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("GroupTest");
                });

            modelBuilder.Entity("Domain.ImageAnswer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("answerid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("file")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("answerid");

                    b.ToTable("ImageAnswer");
                });

            modelBuilder.Entity("Domain.ImageTest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("file")
                        .HasColumnType("TEXT");

                    b.Property<int?>("testid")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("testid");

                    b.ToTable("ImageTest");
                });

            modelBuilder.Entity("Domain.Student", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("number")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Domain.StudentTest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateFinishTest")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateStartTest")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("groupTestid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("status")
                        .HasColumnType("TEXT");

                    b.Property<int?>("studentid")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("groupTestid");

                    b.HasIndex("studentid");

                    b.ToTable("StudentTest");
                });

            modelBuilder.Entity("Domain.Test", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MyPropertyid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Question")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("MyPropertyid");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("Domain.TestResult", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<int?>("answerid")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("studentTestid")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("testid")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("answerid");

                    b.HasIndex("studentTestid");

                    b.HasIndex("testid");

                    b.ToTable("TestResult");
                });

            modelBuilder.Entity("Domain.Answer", b =>
                {
                    b.HasOne("Domain.Test", "tests")
                        .WithMany()
                        .HasForeignKey("testsid");
                });

            modelBuilder.Entity("Domain.ImageAnswer", b =>
                {
                    b.HasOne("Domain.Answer", "answer")
                        .WithMany()
                        .HasForeignKey("answerid");
                });

            modelBuilder.Entity("Domain.ImageTest", b =>
                {
                    b.HasOne("Domain.Test", "test")
                        .WithMany()
                        .HasForeignKey("testid");
                });

            modelBuilder.Entity("Domain.StudentTest", b =>
                {
                    b.HasOne("Domain.GroupTest", "groupTest")
                        .WithMany()
                        .HasForeignKey("groupTestid");

                    b.HasOne("Domain.Student", "student")
                        .WithMany()
                        .HasForeignKey("studentid");
                });

            modelBuilder.Entity("Domain.Test", b =>
                {
                    b.HasOne("Domain.GroupTest", "MyProperty")
                        .WithMany()
                        .HasForeignKey("MyPropertyid");
                });

            modelBuilder.Entity("Domain.TestResult", b =>
                {
                    b.HasOne("Domain.Answer", "answer")
                        .WithMany()
                        .HasForeignKey("answerid");

                    b.HasOne("Domain.StudentTest", "studentTest")
                        .WithMany()
                        .HasForeignKey("studentTestid");

                    b.HasOne("Domain.Test", "test")
                        .WithMany()
                        .HasForeignKey("testid");
                });
#pragma warning restore 612, 618
        }
    }
}
